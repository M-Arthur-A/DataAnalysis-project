#+TITLE: Predicting Probability of Default
#+DESCRIPTION: Данный .org-файл является автособираемым. В emacs сочетание клавиш `Ctrl+c > Ctrl+v > t` конвертирует данный .org-файл в ./src/model.py
#+AUTHOR: Arthur Manzhetov
#+STARTUP: content
#+OPTIONS: line-break:t

* Оглавление :toc:
- [[#описание][Описание]]
  - [[#общие-сведения][Общие сведения]]
  - [[#цель][Цель]]
- [[#подготовительный-этап][Подготовительный этап]]
  - [[#задачи-этапа][Задачи этапа]]
  - [[#выгрузка-данных-из-системы-спарк-интерфакс][Выгрузка данных из системы СПАРК-ИНТЕРФАКС]]
  - [[#блок-загрузки-данных-и-сохранение-в-подходящем-виде][Блок загрузки данных и сохранение в подходящем виде]]
  - [[#сохранение-результирующего-датасета][Сохранение результирующего датасета]]
- [[#построение-модели-данных][Построение модели данных]]
  - [[#добавление-новых-фичей][Добавление новых фичей]]
  - [[#подбор-наилучших-параметров-модели][Подбор наилучших параметров модели]]
  - [[#train-test-split][Train-test-split]]
  - [[#обучение-модели][Обучение модели]]
  - [[#сохранение-и-загрузка-модели][Сохранение и загрузка модели]]
  - [[#применение-функций-и-получение-результата][Применение функций и получение результата]]
- [[#оценка-результата][Оценка результата]]
  - [[#feature_importance][feature_importance]]
    - [[#feature-importance-table][feature importance table]]
    - [[#feature-importance-f-score][feature-importance f-score]]
  - [[#correlation-matrix][correlation matrix]]
    - [[#correlation-matrix-graph][correlation matrix graph]]
  - [[#evaluating][evaluating]]
    - [[#r2][R2]]
    - [[#accuracy][Accuracy]]
    - [[#precision--recall-fscore-roc-auc-confusion-matrix][Precision & recall, fscore, roc-auc, confusion matrix]]
      - [[#roc-curve][ROC-curve]]
      - [[#confusion-matrix][Confusion matrix]]

* Описание
** Общие сведения
    *Курсовой проект на GeekBrains от 15.10.2021*\\
    Преподаватель - Михаил Баранов
** Цель
   Разработка модели предсказания дефолта юридического лица на данных, выгруженных в системе =СПАРК-ИНТЕРФАКС=\\
   Для решения задачи классификации будет использована модель градиентного бустинга XGBOOST. 
   
   *Гипотезы и допущения*\\
   Цель чисто академическая - точность предсказания вероятности дефолта по одной лишь отчетности без расшифровок к ней будет низкой.
   1. Чтобы модель имела возможность предсказать дефолт компании, она должна обучаться на бухгалтерской отчетности, сданной компанией за несколько лет до объявления её банкротом. При этом, теоретически возможна ситуация, когда дата банкротства может быть за пределами выгруженного периода отчетности.
   2. Показатели ИДО, ИФР и ИПД, рассчитываемые системой =СПАРК-ИНТЕРФАКС=, фичами для модели являться не будут, так как отражают текущую ситуацию и во многом дублируют назначение модели.
   3. В целях расчета амортизации расчетный срок полезного использования принят в размере 10 лет.
   4. В целях рассчета долговой нагрузки совокупный долг принят полностью внешним (внутригрупповой долг не учиывается).
* Подготовительный этап
** Задачи этапа
  На данном этапе предполагается:
  * получение исходных данных о компаниях, в том числе банкротах
  * анонимизация результатов выгрузки,
  * объединение имеющихся датасетов,
  * работа с типами,
  * сохранение схемы данных и самих данных.
** Выгрузка данных из системы СПАРК-ИНТЕРФАКС
   Выгрузка реализована со следующими параметрами
   | Показатель                             | Параметры         | Доп.параметры для банкротов |
   |----------------------------------------+-------------------+-----------------------------|
   | Страна                                 | Россия            | -                           |
   | Тип                                    | Компании · Россия | -                           |
   | Наименование                           |                   | -                           |
   | Регистрационный номер                  |                   | -                           |
   | Сайт в сети Интернет                   | Все               | -                           |
   | Возраст компании, лет                  |                   | -                           |
   | Статус                                 | Действующие       | в состоянии банкротства     |
   | Код налогоплательщика                  |                   |                             |
   | Вид деятельности/отрасль               | Любая             | -                           |
   | Код вида деятельности (ОКВЭД)          | Основной          | -                           |
   | ИДО                                    |                   | -                           |
   | ИФР                                    |                   | -                           |
   | ИПД                                    |                   | -                           |
   | Размер компании                        |                   | -                           |
   | Налоговый режим                        | Без фильтра       | -                           |
   | Важная информация                      |                   | -                           |
   | Среднесписочная численность работников | 2018, 2019, 2020  | 2017, 2016, 2015, 2013      |
   | Налоги                                 | 2018, 2019, 2020  | 2017, 2016, 2015, 2013      |
   | Основные средства                      | 2018, 2019, 2020  | 2017, 2016, 2015, 2013      |
   | Чистые активы                          | 2018, 2019, 2020  | 2017, 2016, 2015, 2013      |
   | Активы  всего                          | 2018, 2019, 2020  | 2017, 2016, 2015, 2013      |
   | Совокупный долг                        | 2018, 2019, 2020  | 2017, 2016, 2015, 2013      |
   | Выручка                                | 2018, 2019, 2020  | 2017, 2016, 2015, 2013      |
   | Прибыль (убыток) от продажи            | 2018, 2019, 2020  | 2017, 2016, 2015, 2013      |
   | Чистая прибыль (убыток)                | 2018, 2019, 2020  | 2017, 2016, 2015, 2013      |
   =СПАРК-ИНТЕРФАКС= позволяет осуществлять выгрузку по 10К компаний.
   В рамках данного проекта были выгружены данные о компаниях:
   * с выручкой свыше 1 млрд руб.;
   * имеющих статус "действующая";
   * имеющих статус "в банкротстве", при этом для таких компаний дополнительно выгружены периоды отчетности и поле "Важная информация", из которой можно получить дату банкротства.
   Всего было выгружено несколько датасетов суммарно с 26К строк и 39 столбцов (без учета дополнительных столбцов для компаний-банкротов).
** Блок загрузки данных и сохранение в подходящем виде
   * Импорт основных библиотек
     #+begin_src python :tangle ./src/prepare.py
       import pandas as pd
     #+end_src
   * Ввод необходимых констант
     #+begin_src python :tangle ./src/prepare.py
       # paths
       path_1 = r'./Initial_dataset/Банкротные.xlsx'
       path_2 = r'./Initial_dataset/Большие.xlsx'
       path_3 = r'./Initial_dataset/Живые.xlsx'
       path_4 = r'./Initial_dataset/Банкроты_add.xlsx'

       # constants
       years = [2018, 2019, 2020]
       years_b = [2013, 2014, 2015, 2016, 2017]
     #+end_src
   * Функция анонимизации (удаление идентифицируещих данных
     #+begin_src python :tangle ./src/prepare.py
       def anonimize(_df):
           cols = _df.columns.to_list()
           cols.remove('Наименование')
           cols.remove('Код налогоплательщика')
           return _df[cols]
     #+end_src
   * Функция очистки данных и приведения их к числовому формату
     #+begin_src python :tangle ./src/prepare.py
       def numerize_features(_df):
           _df.loc[_df['Статус'] == 'В состоянии банкротства', 'Статус'] = 1
           _df.loc[_df['Статус'] != 1, 'Статус'] = 0
           _df.loc[_df['Сайт в сети Интернет'].isnull(), 'Сайт в сети Интернет'] = 0
           _df.loc[_df['Сайт в сети Интернет'] != 0, 'Сайт в сети Интернет'] = 1
           _df['Размер компании'] = _df['Размер компании'].factorize()[0]
           _df['Вид деятельности/отрасль'] = _df['Вид деятельности/отрасль'].factorize()[0]
           _df['Налоговый режим'] = _df['Налоговый режим'].factorize()[0]

           for year in ['cur', 'prev']:
               col_name = f'{year}_Среднесписочная численность работников'
               _df.loc[_df[col_name].isnull(), col_name] = 0
               _df.loc[_df[col_name].str.contains('-', na=False), col_name] = _df.loc[_df[col_name].str.contains('-', na=False), col_name].str.split(' - ').str[0]
               _df[col_name] = _df[col_name].str.replace(' ', '')
               _df[col_name] = pd.to_numeric(_df[col_name], errors='coerce')

           for col in _df.columns.tolist():
               if col != 'Статус':
                   _df[col] = _df[col].astype('float64')
           return _df
     #+end_src
   * Функция получения даты банкротства\\
     Из значения столбца <Важная информация> выбирает дату признания банкротом из всех сообщений по компании для использования в lambda или apply
     #+begin_src python :tangle ./src/prepare.py
       def get_bankruptsy_date(_df):
           def bdate_from_string(infos):
               # проверки в порядке важности вхождения
               check1 = ['Решение о признании должника банкротом',
                         'Юридическое лицо признано несостоятельным (банкротом)']
               check2 = ['наблюдение',
                         'наблюдении',
                         'наблюдения']
               check3 = ['внешнего управления',
                         'внешнее управление']
               check4 = ['о возобновлении производства по делу о несостоятельности',
                         'возбуждено производство']
               check5 = ['оздоровления',
                         'оздоровление']
               check6 = ['заявлением о банкротстве']
               if type(infos) == float:
                   return 'NaN'
               for check in [check1, check2, check3, check4, check5, check6]:
                   for mes in str(infos).split(', '):
                       if any(ext in mes for ext in check):
                           return mes.split(' от ')[-1]
               # если эта графа заполнена совсем плохо - берем хотя бы дату ареста счетов ФНС
               for mes in str(infos).split(', '):
                   if 'решения ФНС' in mes:
                       return mes.split()[1]
               return 'Нет решения'

           _df['b_date'] = _df['Важная информация'].apply(bdate_from_string)
           print('Дата банкротства получена')
           return _df
     #+end_src
   * Функции выбора актуальной отчетности для обучающей выборки\\
     Модель будет предсказывать вероятность дефолта компании, а не оперировать фактическими данными обанкротившейся компании.
     
     Для этого требуется взять отчетность компании за несколько лет до банкротства. Эти действия требуются для создания обучающей выборки. Для тестовой выборки эти действия не требуются.
     #+begin_src python :tangle ./src/prepare.py
       def choose_bunkruptsy_financials(_df):
           def get_cols_by_year(year: int) -> list:
               col_financials = []
               for col in _df.columns.tolist():
                   if ',' in col:
                       col_year = col.split(',')[0]
                       if str(col_year) == str(year):
                           col_financials.append(col)
               return col_financials

           # выбор финансовых данных за 2 года до банкротства
           _df['b_year'] = _df['b_date'].str.extract(r'(\d{4})')
           _df.loc[_df['b_year'].isnull(), 'b_year'] = 2013
           _df['b_year_threshold'] = _df['b_year'].astype('int16')-2
           _df.loc[_df['b_year_threshold']<2013, 'b_year_threshold'] = 2013
           # удаление "старых" банкротств, где не будет совсем никакой динамики
           _df = _df.drop(_df.loc[(_df['b_date'].notnull()) & (_df['b_year_threshold'] == 2013)].index)
           # добавление current и previos отчетности за 2 года до банкротства
           bankrupts_filter = _df['b_date'].notnull()
           thresholds = _df.loc[bankrupts_filter, 'b_year_threshold'].value_counts().index.tolist()
           for year in thresholds:
               year_filter = _df['b_year_threshold'] == year
               for col in get_cols_by_year(year):
                   _df.loc[bankrupts_filter & year_filter, 'cur_' + col.split(', ')[1]] = _df.loc[bankrupts_filter & year_filter, col]
               for col in get_cols_by_year(year-1):
                   _df.loc[bankrupts_filter & year_filter, 'prev_'+ col.split(', ')[1]] = _df.loc[bankrupts_filter & year_filter, col]
           return _df

       def choose_financials(_df, training=False, years=years):
           def get_cols_by_year(year: int) -> list:
               col_financials = []
               for col in _df.columns.tolist():
                   if ',' in col:
                       col_year = col.split(',')[0]
                       if str(col_year) == str(year):
                           col_financials.append(col)
               return col_financials
           if training:
               bankrupts_filter = _df['b_date'].notnull()
               filter_df = ~bankrupts_filter    # только живые компании
           else:
               filter_df = _df.index.notnull()  # все компании
           for year in years:
               for col in get_cols_by_year(year):
                   _df.loc[filter_df, 'cur_' + col.split(', ')[1]] = _df.loc[filter_df, col]
               for col in get_cols_by_year(year-1):
                   _df.loc[filter_df, 'prev_'+ col.split(', ')[1]] = _df.loc[filter_df, col]
           return _df
     #+end_src
   * Функция удаления лишних столбцов
     #+begin_src python :tangle ./src/prepare.py
       def clean_df(_df):
           cols = _df.columns.tolist()
           cols[1] = cols[1].replace(', лет', '')
           _df.columns = cols
           cols_to_save = []
           check = [', ', 'b', '№', 'ИДО', 'ИФР', 'ИПД', 'Регистрационный номер', 'Мои списки', 'Реестры СПАРКа', 'Важная информация']
           for c in cols:
               if any(ext in c for ext in check):
                   continue
               cols_to_save.append(c)
           return _df[cols_to_save]
     #+end_src
   * Функция загрузки датасетов и их объединение в один\\
     Применение к полученному датасету написанные ранее функции
     #+begin_src python :tangle ./src/prepare.py
       def prepare_train_dataset():
           df = pd.concat([pd.read_excel(path_1, header=3, dtype=str).iloc[:-2], 
                           pd.read_excel(path_2, header=3, dtype=str).iloc[:-2],
                           pd.read_excel(path_3, header=3, dtype=str).iloc[:-2]])
           df = df.reset_index().iloc[:,2:]
           b_df = pd.read_excel(path_4, header=3, dtype=str).iloc[:-2]
           b_df = get_bankruptsy_date(_df)
           cols_to_merge = ['Код налогоплательщика'] + b_df.columns.difference(df.columns).tolist()
           df = df.merge(b_df[cols_to_merge], on='Код налогоплательщика', how='left')
           df = choose_bunkruptsy_financials(df)
           df = choose_financials(df, training=True)
           df = anonimize(df)
           df = clean_df(df)
           df = numerize_features(df)
     #+end_src
** Сохранение результирующего датасета
     #+begin_src python :tangle ./src/prepare.py
       if __name__ == '__main__':
           df = prepare_train_dataset()

           # сохранение схемы данных для последующего использования
           df.dtypes.to_csv('../data/schema.csv', sep='&')

           # сохранение самого датасета
           df.to_csv('../data/dataset.csv', sep='&', index=False)
     #+end_src
* Построение модели данных
** Добавление новых фичей
   * Основной импорт библиотек
     #+begin_src python :tangle ./src/model.py
       import pandas as pd
       import numpy as np
       import xgboost as xgb
       from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold
       import dill
     #+end_src
   * Добавление новых фичей
     #+begin_src python :tangle ./src/model.py
          # Утилиты
          def col_name(short_name, _df):
              return [name for name in _df.columns if short_name in name]

          # Основыне функции
          def add_features(_df):
              """
              Добавление фичей:
              - ['O'] OIBDA (на основе "гипотетической амортизации" = ОС х (100% / СПИ)), СПИ = 10 лет
              - ['D-O'] Совокупный долг / OIBDA
              - ['O-R'] OIBDA / Выручка
              - ['D-R'] Совокупный долг / Выручка
              - ['E-A'] Основные средства / Активы всего
              """
              for year in ['cur', 'prev']:
                  col = f'{year}_'
                  _df[col+'O']   = _df[col+'Прибыль (убыток) от продажи'] - _df[col+'Основные средства ']*0.1
                  _df[col+'D-0'] = _df[col+'Совокупный долг']   / _df[col+'O']
                  _df[col+'O-R'] = _df[col+'O']                 / _df[col+'Выручка']
                  _df[col+'D-R'] = _df[col+'Совокупный долг']   / _df[col+'Выручка']
                  _df[col+'E-A'] = _df[col+'Основные средства '] / _df[col+'Активы  всего']

              _df = _df.replace([np.inf, -np.inf], np.nan)
              print('DONE - features created.')
              return _df
     #+end_src
** Подбор наилучших параметров модели
     #+begin_src python :tangle ./src/model.py
       def grid_search_cv(_X_train, _y_train):
           xgb_model = xgb.XGBClassifier()
           xgb_params = {'nthread':[4, 6], #when use hyperthread, xgboost may become slower
                         'objective':['reg:squarederror'],
                         'learning_rate': [0.05, 0.03], # `eta` value
                         'max_depth': [3, 6, 12],
                         'min_child_weight': [3, 5, 11], # fighting against overfit
                         'subsample': [0.8],
                         'colsample_bytree': [0.7],
                         'n_estimators': [5, 10, 500, 1000], #number of trees, change it to 1000 for better results
                         'missing':[-999],
                         'seed': [46]}

           grid_search = GridSearchCV(xgb_model,
                                     xgb_params,
                                     cv = 2,
                                     n_jobs = 5,
                                     verbose=True)

           grid_search.fit(_X_train, _y_train)
           return grid_search.best_score_, grid_search.best_params_
     #+end_src
** Train-test-split
     #+begin_src python :tangle ./src/model.py
       def df_split(_df):
           y_train = _df['Статус']
           X_train = _df[[item for item in _df.columns.tolist() if item != 'Статус']]
           # доля банкротных компаний в каждой выборке составляет около 31%
           X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, shuffle=True, random_state=42)
           print('DONE df splitted.', y_train.value_counts()[1]/y_train.value_counts()[0], y_test.value_counts()[1]/y_test.value_counts()[0])
           return X_train, X_test, y_train, y_test
     #+end_src
** Обучение модели
     #+begin_src python :tangle ./src/model.py
       def train_model(_X_train, _y_train):
           xgb_model = xgb.XGBClassifier()
           xgb_params = {'colsample_bytree': 0.7,
                         'learning_rate': 0.05,
                         'max_depth': 6,
                         'min_child_weight': 3,
                         'missing': -999,
                         'n_estimators': 1000,
                         'nthread': 4,
                         'objective': 'reg:squarederror',
                         'seed': 46,
                         'subsample': 0.8}
           xgb_model.set_params(**xgb_params)
           xgb_model.fit(_X_train, _y_train)
           print('DONE - model created.')
           return xgb_model
     #+end_src
** Сохранение и загрузка модели
     #+begin_src python :tangle ./src/model.py
       def model_backup(_model):
           with open('./model/model.pkl', 'wb') as file:
               dill.dump(_model, file)
           print('DONE - model saved.')
    
       def model_load():
           with open('./model/model.pkl', 'rb') as m:
               return dill.load(m)
     #+end_src
** Применение функций и получение результата
     #+begin_src python :tangle ./src/model.py
       if __name__ == '__main__':
            df = pd.read_csv(path_dataset, sep='&')
            df = add_features(df)
            X_train, X_test, y_train, y_test = df_split(df)
            model = train_model(X_train, y_train)
            model_backup(model)
            answers = model.predict_proba(X_test)[:,1]
            print(r2_score(y_test, answers))
     #+end_src
* Оценка результата
** feature_importance
     #+begin_src python
       model = model_load()
       pd.DataFrame(list(zip(X_train.columns.tolist(), \
                             model.feature_importances_.tolist())), \
                    columns=['feature', 'importance'])
     #+end_src
*** feature importance table
      [[./media/feat_importance.png]]

     #+begin_src python
       fig, ax = plt.subplots(1, 1, figsize=(8, 16))
       xgb.plot_importance(model, max_num_features=50, height=0.5, ax=ax)
     #+end_src

*** feature-importance f-score
     [[./media/f-score.png]]
** correlation matrix
     #+begin_src python
       import matplotlib
       import matplotlib.pyplot as plt
       import seaborn as sns
       %matplotlib inline
       %config InlineBackend.figure_format = 'svg'
       sns.set(color_codes=True)
       
       corr_matrix = X_train.corr()
       fig, axes = plt.subplots(1, 1, figsize=(20, 20))
       sns.set(font_scale=0.7)
       axes.set_title("Correlation Matrix", fontsize=12)
       fig = sns.heatmap(corr_matrix, annot=True, linewidths=1, fmt='.2f')
       fig.get_figure().savefig('./media/cormatrix.png')
     #+end_src
*** correlation matrix graph
     [[./media/cormatrix.png]]
** evaluating
   Перевод вероятностей в бинарные предсказания:
     #+begin_src python
       threshold = 0.35  # best result
       binary_answers = [1 if answer > threshold else 0 for answer in answers]
     #+end_src
*** R2
     #+begin_src python
       from sklearn.metrics import r2_score
       r2_score(y_test, binary_answers)
     #+end_src

     Результаты:
     =0.9838153187177718=
*** Accuracy
    доля верно классифицированных объектов относительно общего количества объектов
     #+begin_src python
       from sklearn.metrics import accuracy_score
       accuracy_score(y_test, binary_answers)
     #+end_src

     Результаты:
     =0.9927770093745197=
*** Precision & recall, fscore, roc-auc, confusion matrix
     #+begin_src python
       from sklearn.metrics import precision_recall_curve, roc_curve, roc_auc_score, log_loss, confusion_matrix
       import itertools
       
       def get_scores(y_true, 
                      y_predicted,
                      f_score_b=1,
                      b=1,
                      title='Confusion matrix', 
                      classes=['bankrupt_0', 'bankrupt_1'], 
                      normalize=False):
           """
           calculate:
           - precision
           - recall
           - fscore
           - roc-auc
           - confusion matrix
           """
           precision, recall, thresholds = precision_recall_curve(y_true, y_predicted)
           fscore = (1+b**2)*(precision * recall) / (b**2*precision + recall)
           # locate the index of the largest f score
           ix = np.argmax(fscore)
           roc_auc = roc_auc_score(y_true, y_predicted)
           log_loss_score = log_loss(y_true, y_predicted)
           
           cm = confusion_matrix(y_true, y_predicted)
           TN = cm[0][0]
           FN = cm[1][0]
           TP = cm[1][1]
           FP = cm[0][1]
           TPR = TP/(TP+FN)
           FPR = FP/(FP+TN)
           TNR = TN/(FP+TN)
           print(f'\
Precision = {precision[ix]:.3f}\n\
Recall    = {recall[ix]:.3f}\n\
F-score   = {fscore[ix]:.3f}\n\
ROC_AUC   = {roc_auc:.3f}\n\
Log_loss  = {log_loss_score:.3f}\n\
True_pos  = {TPR:.3f}\n\
False_pos = {FPR:.3f}\n\
True_neg  = {TNR:.3f}\n')

           sns.set(font_scale=1.5)
           sns.set_color_codes("muted")
       
           plt.figure(figsize=(10, 8))
           fpr, tpr, thresholds_ = roc_curve(y_true, y_predicted, pos_label=1)
           lw = 2
           plt.plot(fpr, tpr, lw=lw, label='ROC curve ')
           plt.plot([0, 1], [0, 1])
           plt.xlim([0.0, 1.0])
           plt.ylim([0.0, 1.05])
           plt.xlabel('False Positive Rate')
           plt.ylabel('True Positive Rate')
           plt.title('ROC curve')
           plt.show()
           
           font = {'size' : 15}
           plt.rc('font', **font)
           plt.figure(figsize=(10, 8))
           cmap = plt.cm.Blues
           """
           This function prints and plots the confusion matrix.
           Normalization can be applied by setting `normalize=True`.
           """
           plt.imshow(cm, interpolation='nearest', cmap=cmap)
           plt.title(title)
           plt.colorbar()
           tick_marks = np.arange(len(classes))
           plt.xticks(tick_marks, classes, rotation=45)
           plt.yticks(tick_marks, classes)
       
           if normalize:
               cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
               print("Normalized confusion matrix")
           else:
               print('Confusion matrix, without normalization')
       
           print(cm)
       
           thresh = cm.max() / 2.
           for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
               plt.text(j, i, cm[i, j],
                        horizontalalignment="center",
                        color="white" if cm[i, j] > thresh else "black")
       
           plt.tight_layout()
           plt.ylabel('True label')
           plt.xlabel('Predicted label')
           plt.show()
           return {
                   'Precision': precision[ix],
                   'Recall': recall[ix],
                   'F-score': fscore[ix],
                   'ROC_AUC': roc_auc,
                   'Log_loss': log_loss_score,
                   'True_pos': TPR,
                   'False_pos': FPR,
                   'True_neg': TNR
                   }
       
       get_scores(y_test, binary_answers)
     #+end_src

     Результаты:
     #+begin_src
       Confusion matrix, without normalization
        [4961    9]
        [  10 1527]
       
       {'Precision': 0.994140625,
        'Recall': 0.9934938191281718,
        'F-score': 0.9938171168239505,
        'ROC_AUC': 0.9958414769685124,
        'Log_loss': 0.10085199752269573,
        'True_pos': 0.9934938191281718,
        'False_pos': 0.0018108651911468814,
        'True_neg': 0.9981891348088531}
     #+end_src
**** ROC-curve
     [[./media/ROC_curve.png]]
**** Confusion matrix
     [[./media/conf_matrix.png]]
