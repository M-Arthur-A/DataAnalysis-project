#+TITLE: Predicting Probability of Default
#+DESCRIPTION: Данный .org-файл является автособираемым. В emacs сочетание клавиш `Ctrl+c > Ctrl+v > t` конвертирует данный .org-файл в ./src/model.py
#+AUTHOR: Arthur Manzhetov
#+STARTUP: showeverything

* Оглавление :toc:
- [[#описание][Описание]]
  - [[#общие-сведения][Общие сведения]]
  - [[#цель][Цель]]
- [[#подготовительный-этап][Подготовительный этап]]
  - [[#выгрузка-данных-из-системы-спарк-интерфакс][Выгрузка данных из системы СПАРК-ИНТЕРФАКС]]
  - [[#блок-загрузки-данных-и-сохранение-в-подходящем-виде][Блок загрузки данных и сохранение в подходящем виде]]
  - [[#сохранение-результирующего-датасета][Сохранение результирующего датасета]]
- [[#построение-модели-данных][Построение модели данных]]

* Описание
** Общие сведения
    *Курсовой проект на GeekBrains от 15.10.2021*  
    Преподаватель - Михаил Баранов
** Цель
   Разработка модели предсказания дефолта юридического лица на данных, выгруженных в системе =СПАРК-ИНТЕРФАКС=
   Цель чисто академическая - точность предсказания вероятности дефолта по одной лишь отчетности будет низкой. Кроме того, дата банкротства может быть за пределами выгруженного периода отчетности.
* Подготовительный этап
  На данном этапе предполагается:
  * получение исходных данных о компаниях, в том числе банкротах
  * анонимизация результатов выгрузки,
  * объединение имеющихся датасетов,
  * сохранение схемы данных,
** Выгрузка данных из системы СПАРК-ИНТЕРФАКС
   Выгрузка реализована со следующими параметрами
   | Страна                                 | Россия            |
   | Тип                                    | Компании · Россия |
   | Наименование                           |                   |
   | Регистрационный номер                  |                   |
   | Сайт в сети Интернет                   | Все               |
   | Возраст компании, лет                  |                   |
   | Статус                                 | Действующие       |
   | Код налогоплательщика                  |                   |
   | Вид деятельности/отрасль               | Любая             |
   | Код вида деятельности (ОКВЭД)          | Основной          |
   | ИДО                                    |                   |
   | ИФР                                    |                   |
   | ИПД                                    |                   |
   | Размер компании                        |                   |
   | Налоговый режим                        | Без фильтра       |
   | Среднесписочная численность работников | 2018, 2019, 2020  |
   | Налоги                                 | 2018, 2019, 2020  |
   | Основные средства                      | 2018, 2019, 2020  |
   | Чистые активы                          | 2018, 2019, 2020  |
   | Активы  всего                          | 2018, 2019, 2020  |
   | Совокупный долг                        | 2018, 2019, 2020  |
   | Выручка                                | 2018, 2019, 2020  |
   | Прибыль (убыток) от продажи            | 2018, 2019, 2020  |
   | Чистая прибыль (убыток)                | 2018, 2019, 2020  |
   =СПАРК-ИНТЕРФАКС= позволяет осуществлять выгрузку по 10К компаний.
   В рамках данного проекта были выгружены данные о компаниях:
   * с выручкой свыше 1 млрд руб.;
   * имеющих статус "действующая";
   * имеющих статус "в банкротстве".
   Всего было выгружен датасет с 26К строк и 39 столбцов
** Блок загрузки данных и сохранение в подходящем виде
   * Импорт основных библиотек
     #+begin_src python :tangle ./src/prepare.py
      import pandas as pd
     #+end_src
   * Ввод необходимых констант
     #+begin_src python :tangle ./src/prepare.py
      # paths
      path_1 = r'./Initial_dataset/Банкротные.xlsx'
      path_2 = r'./Initial_dataset/Большие.xlsx'
      path_3 = r'./Initial_dataset/Живые.xlsx'

      # constants
      years = [2018, 2019, 2020]
     #+end_src
   * Создание функции анонимизации (удаление идентифицируещих данных
     #+begin_src python :tangle ./src/prepare.py
      def anonimize(_df):
          cols = _df.columns.to_list()
          cols.remove('Наименование')
          cols.remove('Код налогоплательщика')
          return _df[cols]
     #+end_src
   * Создание функции очистки данных и приведения их к числовому формату
     #+begin_src python :tangle ./src/prepare.py
      def numerize_features(_df):
          _df.loc[_df['Статус'] == 'В состоянии банкротства', 'Статус'] = 1
          _df.loc[_df['Статус'] != 1, 'Статус'] = 0
          _df.loc[_df['Сайт в сети Интернет'].isnull(), 'Сайт в сети Интернет'] = 0
          _df.loc[_df['Сайт в сети Интернет'] != 0, 'Сайт в сети Интернет'] = 1
          _df['Размер компании'] = _df['Размер компании'].factorize()[0]
          _df['Вид деятельности/отрасль'] = _df['Вид деятельности/отрасль'].factorize()[0]
          cols  = ['Статус',
                  'Сайт в сети Интернет',
                  'Возраст компании, лет',
                  'ИДО',
                  'ИФР',
                  'ИПД',
                  '2018, Налоги, млн RUB',
                  '2019, Налоги, млн RUB',
                  '2020, Налоги, млн RUB',
                  '2018, Основные средства , млн RUB',
                  '2019, Основные средства , млн RUB',
                  '2020, Основные средства , млн RUB',
                  '2018, Чистые активы, млн RUB',
                  '2019, Чистые активы, млн RUB',
                  '2020, Чистые активы, млн RUB',
                  '2018, Активы  всего, млн RUB',
                  '2019, Активы  всего, млн RUB',
                  '2020, Активы  всего, млн RUB',
                  '2018, Совокупный долг, млн RUB',
                  '2019, Совокупный долг, млн RUB',
                  '2020, Совокупный долг, млн RUB',
                  '2018, Выручка, млн RUB',
                  '2019, Выручка, млн RUB',
                  '2020, Выручка, млн RUB',
                  '2018, Прибыль (убыток) от продажи, млн RUB',
                  '2019, Прибыль (убыток) от продажи, млн RUB',
                  '2020, Прибыль (убыток) от продажи, млн RUB',
                  '2018, Чистая прибыль (убыток), млн RUB',
                  '2019, Чистая прибыль (убыток), млн RUB',
                  '2020, Чистая прибыль (убыток), млн RUB']

          for col in cols:
              _df[col] = _df[col].astype('float64')

          for year in years:
              _df.loc[_df[f'{year}, Среднесписочная численность работников'].isnull(), f'{year}, Среднесписочная численность работников'] = 0

              _df.loc[_df[f'{year}, Среднесписочная численность работников']\
                .str.contains('-', na=False), \
                f'{year}, Среднесписочная численность работников'] = \
              _df.loc[_df[f'{year}, Среднесписочная численность работников']\
                .str.contains('-', na=False), \
                f'{year}, Среднесписочная численность работников'].str.split(' - ').str[0]

              _df[f'{year}, Среднесписочная численность работников'] = _df[f'{year}, Среднесписочная численность работников'].str.replace(' ', '')

              _df[f'{year}, Среднесписочная численность работников'] = pd.to_numeric(_df[f'{year}, Среднесписочная численность работников'], errors='coerce')
          return _df
     #+end_src
     
   * Загрузка датасетов и их объединение в один; применение к ним написанных ранее функций
     #+begin_src python :tangle ./src/prepare.py
      df = pd.concat([pd.read_excel(path_1, header=3, dtype=str).iloc[:-2], 
                      pd.read_excel(path_2, header=3, dtype=str).iloc[:-2],
                      pd.read_excel(path_3, header=3, dtype=str).iloc[:-2]])
      df = df.reset_index().iloc[:,2:]
      df = anonimize(df)
      df = numerize_features(df)
     #+end_src
** Сохранение результирующего датасета
   * сохранение схемы данных для последующего использования
     #+begin_src python :tangle ./src/prepare.py
       df.dtypes.to_csv('../data/schema.csv', sep='&')
     #+end_src
   * сохранение самого датасета
     #+begin_src python :tangle ./src/prepare.py
       df.to_csv('../data/dataset.csv', sep='&')
     #+end_src
* Построение модели данных
